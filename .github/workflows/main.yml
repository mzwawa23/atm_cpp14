name: SCA and UT build with execution (main)

on:
  push:
    branches: [ main ]

env:
  LINE_COV_GATE: 20
  MCDC_COV_GATE: 30
  
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  run-cpptest-SCA:
    name: Analyze project with C/C++test

    # Specifies required permissions for upload-sarif action
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout code
      uses: actions/checkout@v4

    # Configures your CMake project. Be sure the compile_commands.json file is created.
    - name: Configure project
      run: cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -S . -B build

    # Builds your CMake project. (This step is optional, as it is not required for code analysis).
    #- name: Build project (optional)
    #  run: cmake --build build

    # Runs code analysis with C/C++test.
    - name: Run C/C++test
      # Use the 'run-cpptest-action' GitHub action.
      uses: parasoft/run-cpptest-action@2.0.2
      # Optional parameters for 'run-cpptest-action'.
      with:
        # For CMake-based projects, use a compile_commands.json file as the input for analysis. 
        input: build/compile_commands.json
        testConfig: 'builtin://MISRA C++ 2023'
        # Uncomment if you are using C/C++test 2020.2 to generate a SARIF report:
        # reportFormat: xml,html,custom
        # additionalParams: '-property report.custom.extension=sarif -property report.custom.xsl.file=${PARASOFT_SARIF_XSL}'
        additionalParams: -showdetails -exclude "**/googletest/**" -exclude "**/tests/**" -exclude "**/googlemock/**" -property scontrol.rep1.git.workspace=/home/marcin/work/source/github/actions-runner/atm_cpp14/_work/atm_cpp14/atm_cpp14 -property scontrol.rep1.git.url=https://github.com/mzwawa23/atm_cpp14

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/report.sarif
    
    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: CpptestReports
        path: reports/*.*

  build_with_ut_ccov:
    runs-on: self-hosted
    continue-on-error: true

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}
      run: cmake -DCPPTEST_COVERAGE=ON -S . -B build

    - name: Build 
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build build

    - name: Run Tests
      working-directory: ${{github.workspace}}/build
      if: always()
      continue-on-error: true
      shell: bash
      run: ./atm_gtest

    - name: Generate Reports
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: make cpptestcov-compute cpptestcov-suppress cpptestcov-report
 
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: CpptestReports
        path: ${{github.workspace}}/.coverage/*.*

    - name: Deploy to GitHub pages
      id: deployment
      uses: actions/deploy-pages@v2

    - name: Line Coverage Quality Gate
      working-directory: ${{github.workspace}}
      shell: bash
      # Query for project's coverage and compare with the gate requirements
      run: NUMBER=$(cpptestcov query -coverage LC .coverage) && if [ $NUMBER -lt $LINE_COV_GATE ]; then echo "Line coverage quality gate failed"; echo "Expected result $LINE_COV_GATE%, achieved $NUMBER%"; false; else echo "Line coverage quality gate passed with $NUMBER% (required $LINE_COV_GATE%)"; true; fi      
      
    - name: MCDC Coverage Quality Gate
      working-directory: ${{github.workspace}}
      shell: bash
      # Query for project's coverage and compare with the gate requirements
      run: NUMBER=$(cpptestcov query -coverage MCDC .coverage) && if [ $NUMBER -lt $MCDC_COV_GATE ]; then echo "MCDC coverage quality gate failed"; echo "Expected result $MCDC_COV_GATE%, achieved $NUMBER%"; false; else echo "MC/DC coverage quality gate passed with $NUMBER% (required $MCDC_COV_GATE%)"; true; fi  